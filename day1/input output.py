'''
基本输入与输出
'''

'''
help()函数可以列出某一个python的指令或函数的使用说明
'''
#实例一：列出输出函数print（）的使用说明
help(print)


'''
函数print（）的基本语法
它的基本语法格式如下：
print(value,...,sep="",end="\n")
value:表示想要输出的数据，可以一个输出多个数据，各数据间以逗号隔开。
sep:当输出多个数据时，可以插入各个数据的分隔字符，默认时一个空格符
end:当数据输出结束时所插入的字符，默认时插入换行字符，所以下一次print函数的输出会在下一行输出
'''
#实例：输出多个值，中间插入分隔符，换行的使用
a = 123
b = 456
print(a,b)  #输出多个值
print(a,b,sep="$$$")   #这里分隔符为$
print(a,b,end="\t")    #插入tab，两个值之间出现空格
print(a,b,sep="$")


'''
格式化print()输出
在使用格式化输出时，基本使用格式如下：
print("...输出格式区..."%(变量系列区，...))
在上述输出格式区中，可以放置变量系列区相对应的格式化字符，这些格式化字符的基本意义如下：
%d：格式化整数输出
%f：格式化浮点数输出
%s：格式化字符串输出
'''
#实例：格式化输出的应用
n = "青山"
km = 90
print("%s先生，你的本月跑步公里为%d"%(n,km))

'''
精准控制格式化的输出
下面这些函数提供的功能可以设置保留多少位的空间让数据做输出，语法如下：
%(+|-)nd:格式化整数输出
%(+|-)m.nf:格式化浮点数输出
%(-)ns:格式化字符串输出
以上对于浮点数而言，m代表保留多少位数输出，包括小数点，n则是小数数据保留位数，至于其他的
数据格式，n则是保留多少位数空间，如果保留位数空间不足将完整输出数据，如果保留位数空间太多则数据靠右对齐
如果是格式化数值或字符串数据又加上负号，表示保留位数空间有多少时，数据将靠左输出。如果时格式化数值数据又加上
正号，表示输出数据是正值时，将在左边加上正值符号
'''
#实例
x = 100
print("x=/%6d/"%x)
y = 10.55
print("y=/%6.2f/"%y)
s = "FreeDom"
print("s=/%6s/"%s)
#保留空间不足的输出实例
print("x=/%2d/"%x)
print("y=/%3.2f/"%y)
print("s=/%2s/"%s)
#格式化输出，向左对齐实例
print("x=/%-6d/"%x)
print("y=/%-6.2f/"%y)
print("s=/%-6s/"%s)

'''
format()函数
这是python增强版的格式化输出的功能，它的意义时字符串使用format方法做格式化动作，它的基本使用格式如下：
print("...输出格式区...".format(变量系列区，...))
在输出格式区内的字符串变量使用"{}"表示
'''
#format函数的使用
a1 = 123
n1 = "青山"
print("{}先生，您本月跑步公里为{}km".format(n1,a1))

'''
数据输入input（）
这个input函数功能与print函数功能相反，这个函数会读取用户输入的数据，使用格式如下
value = input("可以随意写一句话：")
value是变量，所输入的数据会存储在此变量内，特别要注意的是输入的数据不论是字符串或者数值数据
返回刀value时都是字符串数据，如果要执行数学运算需要用int()函数转换为整数或是float函数转换为
浮点数
'''
#input函数使用
sl = input("输入数据：")